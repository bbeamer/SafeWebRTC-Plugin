/* -------------------------------   -------------------------------

This addon checks if the permissions table was modified "on the fly" in 
browser context.
modified means a permission was added.

Once it was modified by any mean (through some sqlite query, or same sql API)
an event will be fired which we handle with the system/events module.

The plugin Asks for user consent to allow sharing local devices with specific 
origin.
   -------------------------------   -------------------------------
*/

var {Cc, Ci, Cu} = require ("chrome");
var {setInterval} = require ("sdk/timers");
const fileIO = require("sdk/io/file");

Cu.import("resource://gre/modules/osfile.jsm");
Cu.import("resource://gre/modules/Sqlite.jsm");
Cu.import("resource://gre/modules/Task.jsm");

var permissionFilePath = OS.Constants.Path.profileDir
    +"/permissions.sqlite";
var prompts = Cc["@mozilla.org/embedcomp/prompt-service;1"]
  .getService(Ci.nsIPromptService);
var permissionManager = Cc["@mozilla.org/permissionmanager;1"]
  .createInstance(Ci.nsIPermissionManager);

//-------------------------------
//functions definition
//Read unicode data from binary file
/*
function readBinaryDataFromFile (filename) {
    var data = null;
    if (fileIO.exists(filename)) {
        var ByteReader = fileIO.open(filename, "rb");
        if(!ByteReader.closed) {
            data = ByteReader.read();
            ByteReader.close();
        }
    }
    return data;
}
*/

//read values of all ids columns in moz_hosts
let idsPromise = Task.spawn(function* () {
    let ids = [];
    let db = yield Sqlite.openConnection({ path:
                                          permissionFilePath});
    
    try {
        let row = yield db.execute(
            "SELECT id FROM 'moz_hosts'");    
        ids = row.map(row => row.getResultByIndex(0));
    }
    finally {        
        yield db.close();
    }
    
    //return database values as an array
    return ids;
});

//calculate diff between two arrays
function arr_diff(a1, a2)
{
  var a=[], diff=[];
  for(var i=0;i<a1.length;i++)
    a[a1[i]]=true;
  for(var i=0;i<a2.length;i++)
    if(a[a2[i]]) delete a[a2[i]];
    else a[a2[i]]=true;
  for(var k in a)
    diff.push(parseInt(k));
  return diff;
}

//-----------hasher------------
function sha1File(path) {
    let f = Cc["@mozilla.org/file/local;1"]
        .createInstance(Ci.nsILocalFile);
    f.initWithPath(path);
    let hasher = Cc["@mozilla.org/security/hash;1"]
             .createInstance(Ci.nsICryptoHash);
    hasher.init(hasher.SHA1);

    let is = Cc["@mozilla.org/network/file-input-stream;1"]
         .createInstance(Ci.nsIFileInputStream);
    is.init(f, -1, 0, 0);
    hasher.updateFromStream(is, Math.pow(2, 32) - 1);
    is.close();
    let bytes = hasher.finish(false);

    return [("0" + bytes.charCodeAt(byte).toString(16)).slice(-2)
      for (byte in bytes)].join("");
}

//--------------------------------------------
//Global variables
//var oldData = readBinaryDataFromFile(permissionFilePath);
var oldData = sha1File(permissionFilePath);
var oldids = [];
idsPromise.then(function (ids) {
    oldids = Array.from(ids)    
});

/*console.log("---------------------");
console.log("sha1 hash oldData: "+oldData);
console.log("---------------------");*/
//---------------------------------------------

setInterval(function() {
    var data = sha1File(permissionFilePath);
    /*console.log("---------------------");
    console.log("sha1 hash data: "+data);
    console.log("---------------------");*/
    console.log("oldids = "+oldids);
    if(oldData != data) 
    {
        console.log("you have changed the sqlite database");
        oldData = data;
        
        //read values of all ids columns in moz_hosts
        //open a new connection to the database since it changed
        let newidsPromise = Task.spawn(function* () {
            let newids = [];
            let db = yield Sqlite.openConnection({ path:
                                                  permissionFilePath});
            try {
                let row = yield db.execute(
                    "SELECT id FROM 'moz_hosts'");    
                newids = row.map(row => row.getResultByIndex(0)); 
                console.log("new ids = "+newids);
                var id = arr_diff(oldids, newids);
                let rows = yield db.execute("SELECT host, type, permission"+
                                            " FROM 'moz_hosts' WHERE id = "
                                           + id);
                oldids = newids;
                let host = rows.map(rows => rows.getResultByIndex(0));
                let type = rows.map(rows => rows.getResultByIndex(1));
                let permission = rows.map(rows => rows.getResultByIndex(2));
                console.log("host : "+host+" type : "+type+" permission : "
                            +permission);
                
                if(permission == 1) {
                    var result = prompts.confirm(null, "Security check:"+
                                                 "permissions confirm", 
                                   "Do you really want to share "+
                                   type+" with origin "+
                                   host+" ?");
                    if (result)
                        //Nothing to do
                        console.log("ok, shared");
                    else {
                        console.log("got to clear it");
                        console.log("to remove host : "+host+" type : "
                                    +type);
                        permissionManager.remove(host, type);
                        yield db.execute("DELETE FROM 'moz_hosts' WHERE id = "
                                         +id);
                    }
                }
            }
            finally {
                yield db.close();
            }
        });
    } else{
        console.log("not yet");
    }
}, 5000);
